package com.mrspd.pokedex.fragmentsimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.SearchViewimport android.widget.Toastimport androidx.fragment.app.Fragmentimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.ItemTouchHelperimport androidx.recyclerview.widget.RecyclerViewimport com.google.android.material.snackbar.Snackbarimport com.mrspd.pokedex.Rimport com.mrspd.pokedex.adapters.PokeListAdapterimport com.mrspd.pokedex.models.modelspokedex.Pokeresponseimport com.mrspd.pokedex.ui.MainActivityimport com.mrspd.pokedex.viewmodel.PokeViewModelimport kotlinx.android.synthetic.main.fragment_pokedex.*class PokedexFragment : Fragment(R.layout.fragment_pokedex) {    lateinit var viewModel: PokeViewModel    private var listAdapter = PokeListAdapter(arrayListOf())    private var counter = 1    private val pokemonObserver = androidx.lifecycle.Observer<Pokeresponse> {        if (it != null) {//            listAdapter.differ.submitList(mutableListOf(it))            listAdapter.updateNameList(it)        }    }    private val loadingObserver = androidx.lifecycle.Observer<Boolean> { isLoading ->        if (isLoading) {            progressBar.visibility = View.VISIBLE        } else {            progressBar.visibility = View.GONE        }    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_pokedex, container, false)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        viewModel = (activity as MainActivity).viewModel        viewModel.loading.observe(this, loadingObserver)        viewModel.pokemons.observe(this, pokemonObserver)        listAdapter.AllPokeDex.clear()        viewModel.refresh1(counter)//        listAdapter.AllPokeDex.clear()        //configure recyclerview        recyclerView.apply {            adapter = listAdapter            layoutManager = GridLayoutManager(context, 1)        }        recyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {                super.onScrollStateChanged(recyclerView, newState)                if (!recyclerView.canScrollVertically(1)) {                    Toast.makeText(context, "Last", Toast.LENGTH_LONG).show()                    counter += 19                    viewModel.refresh1(counter)                }            }        })        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {            override fun onQueryTextSubmit(query: String?): Boolean {                return false            }            override fun onQueryTextChange(newText: String?): Boolean {                listAdapter.filter.filter(newText)                return false            }        })        val itemTouchHelperCallback = object : ItemTouchHelper.SimpleCallback(            ItemTouchHelper.UP or ItemTouchHelper.DOWN,            ItemTouchHelper.RIGHT or ItemTouchHelper.LEFT        ) {            override fun onMove(                recyclerView: RecyclerView,                viewHolder: RecyclerView.ViewHolder,                target: RecyclerView.ViewHolder            ): Boolean {                return true            }            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {                val position = viewHolder.adapterPosition                val pokeresponse = listAdapter.AllPokeDex[position]                viewModel.upsert(pokeresponse)                Snackbar.make(view, "Succesfully Saved To Your Favorites", Snackbar.LENGTH_LONG)                    .apply {                        setAction("Undo") {                        viewModel.upsert(pokeresponse)                        }                        show()                    }            }        }        ItemTouchHelper(itemTouchHelperCallback).apply {            attachToRecyclerView(recyclerView)        }    }}